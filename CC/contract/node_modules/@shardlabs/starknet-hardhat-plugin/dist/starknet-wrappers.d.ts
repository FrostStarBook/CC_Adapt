import { Image, ProcessResult } from "@nomiclabs/hardhat-docker";
import { Choice } from "./types";
export interface CompileOptions {
    file: string;
    output: string;
    abi: string;
    cairoPath: string;
}
export interface DeployOptions {
    contract: string;
    gatewayUrl: string;
    inputs?: string[];
    salt?: string;
}
export interface InvokeOrCallOptions {
    choice: Choice;
    address: string;
    abi: string;
    functionName: string;
    inputs?: string[];
    signature?: string[];
    wallet?: string;
    account?: string;
    accountDir?: string;
    networkID?: string;
    gatewayUrl: string;
    feederGatewayUrl: string;
    blockNumber?: string;
}
export interface GetTxStatusOptions {
    hash: string;
    gatewayUrl: string;
    feederGatewayUrl: string;
}
export interface DeployAccountOptions {
    wallet: string;
    accountName: string;
    accountDir: string;
    gatewayUrl: string;
    feederGatewayUrl: string;
    network: string;
}
export declare abstract class StarknetWrapper {
    protected prepareCompileOptions(options: CompileOptions): string[];
    abstract compile(options: CompileOptions): Promise<ProcessResult>;
    protected prepareDeployOptions(options: DeployOptions): string[];
    abstract deploy(options: DeployOptions): Promise<ProcessResult>;
    protected prepareInvokeOrCallOptions(options: InvokeOrCallOptions): string[];
    abstract invokeOrCall(options: InvokeOrCallOptions): Promise<ProcessResult>;
    protected prepareGetTxStatusOptions(options: GetTxStatusOptions): string[];
    abstract getTxStatus(options: GetTxStatusOptions): Promise<ProcessResult>;
    protected getPythonDeployAccountScript(options: DeployAccountOptions): string;
    abstract deployAccount(options: DeployAccountOptions): Promise<ProcessResult>;
}
export declare class DockerWrapper extends StarknetWrapper {
    private docker;
    private image;
    private pythonPath;
    constructor(image: Image);
    private getDocker;
    compile(options: CompileOptions): Promise<ProcessResult>;
    deploy(options: DeployOptions): Promise<ProcessResult>;
    invokeOrCall(options: InvokeOrCallOptions): Promise<ProcessResult>;
    getTxStatus(options: GetTxStatusOptions): Promise<ProcessResult>;
    deployAccount(options: DeployAccountOptions): Promise<ProcessResult>;
}
export declare class VenvWrapper extends StarknetWrapper {
    private starknetCompilePath;
    private starknetPath;
    constructor(venvPath: string);
    private execute;
    compile(options: CompileOptions): Promise<ProcessResult>;
    deploy(options: DeployOptions): Promise<ProcessResult>;
    invokeOrCall(options: InvokeOrCallOptions): Promise<ProcessResult>;
    getTxStatus(options: GetTxStatusOptions): Promise<ProcessResult>;
    deployAccount(options: DeployAccountOptions): Promise<ProcessResult>;
}
